#!/bin/bash


# Color Settings
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
BOLD_BLUE="\033[1;34m"
BOLD="\033[1m"
NC="\033[0m"


# Configuration/files
BLACKLIST_FILE="$HOME/.cscblacklist"
CONFIG_FILE="$HOME/.csconfig"
MODE="quark"
PREFIX="${BOLD_BLUE}CS-CONNECT${NC}"
SCRIPT_NAME=$(basename "$0")
SERVER_PREFIX="galileo"
BROKEN_SERVERS_URL="https://www.cs.purdue.edu/homes/deng254/ta-notes.html"

# Load or create config
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        # Create config
        cat > "$CONFIG_FILE" <<EOF
# CS-CONNECT configuration - By Alex

# General Options
SERVER_PREFIX="galileo"
BROKEN_SERVERS_URL="https://www.cs.purdue.edu/homes/deng254/ta-notes.html"


# Automatically pull broken servers from https://www.cs.purdue.edu/homes/deng254/ta-notes.html
REFRESH_BROKEN="TRUE"

EOF
    fi
}

# Initial config load
load_config

# Pull broken servers
pullBrokenServers() {
    echo -e "${PREFIX} ${BOLD}- ${NC}Pulling broken servers from TA notes... ${NC}"
    
    local html
    if ! html=$(curl -sfL "$BROKEN_SERVERS_URL"); then
        echo -e "${PREFIX} ${BOLD}- ${RED}Error:${NC} Failed to pull TA notes from ${YELLOW} $BROKEN_SERVERS_URL ${NC}" >&2
        return 1
    fi
    local servers=$(echo "$html" | grep -i "Broken Backends" -A3 | grep -Eo 'galileo[0-9]+' | sort -u)

    if [[ -z "$servers" ]]; then
        echo -e "${PREFIX} ${BOLD}- ${NC} No broken servers found in TA notes... ${NC}" >&2
        return 1$
    fi

    # Add valid servers to blacklist
    local added=0
    for server in $servers; do
        if isValid "$server"; then
            if ! grep -qxF "$server" "$BLACKLIST_FILE" 2>/dev/null; then
                echo "$server" >> "$BLACKLIST_FILE"
                ((added++))
                echo -e "${PREFIX} ${BOLD} - ${NC} Auto-added broken server: ${REED}$server ${NC}"
            fi
        fi
    done

    if [[ $added -gt 0 ]]; then
        echo -e "${PREFIX} ${BOLD}- ${NC} Added ${RED}$added ${NC}new broken servers to blacklist ${NC}"
    else
        echo -e "${PREFIX} ${BOLD}- ${GREEN}No new broken servers found... ${NC}"
    fi
}


set_config() {
    local key="$1"
    local value="$2"
    
    local upperValue="${value^^}"
    
    # Check if the config is valid
    case $key in
        REFRESH_BROKEN)
            if [[ "$upperValue" != "TRUE" && "$upperValue" != "FALSE" ]]; then
                echo -e "${PREFIX} ${BOLD}- ${RED}Error: key must be TRUE or FALSE${NC}" >&2
                exit 1
            fi
            value="\"$upperValue\""
            ;;
        SERVER_PREFIX|BROKEN_SERVERS_URL)
            if [[ -z "$value" ]]; then
                echo -e "${PREFIX} ${BOLD}- ${RED}Error: key cannot be empty${NC}" >&2
                exit 1
            fi
            value="\"$value\""
            ;;
        *)
            echo -e "${PREFIX} ${BOLD}- ${RED}Error: Unknown configuration key '$key'${NC}" >&2
            exit 1
            ;;
    esac

    # Update config file
    if grep -q "^$key=" "$CONFIG_FILE"; then
        sed -i "s/^$key=.*/$key=$value/" "$CONFIG_FILE"
    else
        echo "$key=$value" >> "$CONFIG_FILE"
    fi
    
    echo -e "${PREFIX} ${BOLD}- ${GREEN}Updated config: $key=${value//\"/} ${NC}"
    load_config  
}

# Display current config
config_disp() {
    echo -e "${PREFIX} ${BOLD}- ${GREEN}Current Configuration:${NC}"
    echo -e "${YELLOW}--------------------------------${NC}"
    cat "$CONFIG_FILE"
    echo -e "${YELLOW}--------------------------------${NC}"
    echo -e "${NC}Config location: ${RED}$CONFIG_FILE"
}


# Reset config
reset_config() {
    rm -f "$CONFIG_FILE"
    echo -e "${PREFIX} ${BOLD}- ${GREEN}Configuration file removed. Creating default config...${NC}"
    load_config
    echo -e "${PREFIX} ${BOLD}- ${GREEN}Configuration has been reset to default values.${NC}"
}

# Get all servers
VALID_SERVERS=$(cs-status -c $MODE | awk 'NR>1 {print $1}')
CACHED_SERVERS=($VALID_SERVERS)
SERVER_NUMBERS=($(printf '%s\n' "${CACHED_SERVERS[@]}" | sed "s/^${SERVER_PREFIX}//" | sort -n))

# Help
help_disp() {

    cat <<EOF
CS-CONNECT - Connect to available xinu server randomly

USAGE:
    ${SCRIPT_NAME} [OPTIONS] [SERVER]

OPTIONS:
    GENERAL:
        -l, --list              Complete list of xinu servers
        -h, --help              Show help message

    BLACKLIST:
        -b, --blacklist         Display blacklisted servers
        -a, --add SERVER...     Add servers to blacklist
        -r, --remove SERVER...  Remove servers from blacklist
        -c, --clear             Clear blackblist

    CONFIG:
        -cg, --config           Show current configuration
        -s,  --set KEY=VALUE   Update configuration setting
        -rc, --reset-config     Reset configuration to default values

    SCRIPT INFO:
        -v, --version           Show version

COMMANDS:
    Without options             Connect to a random available server
    SERVER                      Connect to specified server directly
    NUMBER                      Connect using a number shortcut (e.g. 105 â†’ ${SERVER_PREFIX}105)
                                Range: (${SERVER_NUMBERS[0]} - ${SERVER_NUMBERS[-1]})

CONFIGURATION:
    Config file:                ${CONFIG_FILE}
    Automatic updates:          ${REFRESH_BROKEN}
    Source URL:                 ${BROKEN_SERVERS_URL}

BLACKLIST:
    Blacklist is stored in:     ${BLACKLIST_FILE}
    Add/remove broken servers from the selection list.

EXAMPLES:
    Connect to random available server:
        ${SCRIPT_NAME}

    Connect to specific server:
        ${SCRIPT_NAME} galileo105
        ${SCRIPT_NAME} 105

    Blacklist servers:
        ${SCRIPT_NAME} --add galileo105 galileo106
        ${SCRIPT_NAME} -a 105 106

    Remove from blacklist:
        ${SCRIPT_NAME} --remove galileo105
        ${SCRIPT_NAME} -r 105

    Configure settings:
        ${SCRIPT_NAME} -c --config                # Show current config
        ${SCRIPT_NAME} -s SERVER_PREFIX=server    # Change mode (NO CLUE if there are others)
        ${SCRIPT_NAME} --set REFRESH_BROKEN=FALSE # Disable auto-updates


VERSION 0.1 - Alex G
EOF
}


# Range
getServerRange() {
    if [ ${#SERVER_NUMBERS[@]} -eq 0 ]; then
        echo -e "${RED}No servers available${NC}"
        return
    fi
    
    local min=${SERVER_NUMBERS[0]}
    local max=${SERVER_NUMBERS[-1]}
    
    if [ "$min" == "$max" ]; then
        echo "$min"
    else
        echo "$min-$max"
    fi
}



clear_blacklist() {
    rm -rf $BLACKLIST_FILE
    echo -e "${PREFIX} {BOLD}- ${GREEN}Blacklist cleared...${NC}"
}

# Display blacklist list
display_blacklist() {
    echo -e "${PREFIX} ${BOLD}- ${YELLOW}Blacklist List${NC}"
    if [[ -f "$BLACKLIST_FILE" && -s "$BLACKLIST_FILE" ]]; then
        cat "$BLACKLIST_FILE"
    else
        echo -e "${GREEN}No servers in blacklist ${NC}"
    fi
    echo ""
    echo -e "${PREFIX} ${BOLD}- ${YELLOW}Manage blacklist with:${NC}"
    echo -e "  ${SCRIPT_NAME} ${BOLD}-a SERVER...${NC}"
    echo -e "  ${SCRIPT_NAME} ${BOLD}-r SERVER...${NC}"
    echo -e "  ${SCRIPT_NAME} ${BOLD}-c clear${NC}"
}

display_all() {
    echo -e "${PREFIX} ${BOLD}- ${GREEN}ENTIRE Server List${NC}"
    cs-status -c $MODE 
}

# check that the server is valid
isValid() {
    local server=$1
    printf '%s\n' "${CACHED_SERVERS[@]}" | grep -qxF "$server"
}

# check if server is available
isAvailable() {
    local server=$1
    cs-status -c $MODE | awk -v s="$server" '$1 == s && /user= [ ]+time= / {print $1}' | grep -qxF "$server"
}


checkServerName() {
    local server=$1
    if ! printf '%s\n' "${CACHED_SERVERS[@]}" | grep -qxF "$server"; then
        local range=$(getServerRange)
        echo -e "${PREFIX} ${BOLD}- ${RED}Error: Invalid server '$1'${NC}" >&2
        if [[ $1 =~ ^[0-9]+$ ]]; then
            echo -e "${RED}Valid numeric range: ${range}${NC}" >&2
        else
            echo -e "${RED}Valid server format: ${SERVER_PREFIX}${range} ${NC}" >&2
        fi
        return 1
    fi
    return 0
}




# Add servers to blacklist
add_to_blacklist() {
    for input in "$@"; do
        local server=$input

        # Convert to galileo + number
        if [[ $input =~ ^[0-9]+$ ]]; then
            server="${SERVER_PREFIX}${input}"
            echo -e "${PREFIX} ${BOLD}- ${Green}Converting number '${input}' as '${server}'${NC}"
        fi

        if ! printf '%s\n' "${CACHED_SERVERS[@]}" | grep -qxF "$server"; then
            local range=$(getServerRange)
            echo -e "${PREFIX} ${BOLD}- ${RED}Error: Invalid server '$1'${NC}" >&2
            if [[ $1 =~ ^[0-9]+$ ]]; then
                echo -e "${RED}Valid numeric range: ${range}${NC}" >&2
            else
                echo -e "${RED}Valid server format: ${SERVER_PREFIX}${range}${NC}" >&2
            fi
            exit 1
        fi

        if ! grep -qxF "$server" "$BLACKLIST_FILE" 2>/dev/null; then
            echo "$server" >> "$BLACKLIST_FILE"
            echo -e "${PREFIX} ${BOLD}- ${GREEN}Added $server to blacklist${NC}"
        else
            echo -e "${PREFIX} ${BOLD}- ${RED}$server is already in blacklist${NC}"
        fi
    done
}


# Remove servers from blacklist
remove_from_blacklist() {
    for input in "$@"; do
        local server=$input

        # Convert to galileo + number
        if [[ $input =~ ^[0-9]+$ ]]; then
            server="${SERVER_PREFIX}${input}"
            echo -e "${PREFIX} ${BOLD}- ${GREEN}Converting number '${input}' as '${server}'${NC}"
        fi

        if ! printf '%s\n' "${CACHED_SERVERS[@]}" | grep -qxF "$server"; then
            local range=$(getServerRange)
            echo -e "${PREFIX} ${BOLD}- ${RED}Error: Invalid server '$1'${NC}" >&2
            if [[ $1 =~ ^[0-9]+$ ]]; then
                echo -e "${RED}Valid numeric range: ${range}${NC}" >&2
            else
                echo -e "${RED}Valid server format: ${SERVER_PREFIX}${range}${NC}" >&2
            fi
            exit 1
        fi

        if grep -qxF "$server" "$BLACKLIST_FILE" 2>/dev/null; then
            sed -i "/^$server$/d" "$BLACKLIST_FILE"
            echo -e "${PREFIX} ${BOLD}- ${RED}Removed $server from blacklist${NC}"
        else
            echo -e "${PREFIX} ${BOLD}- ${RED}$server is not in blacklist${NC}"
        fi
    done
}


# Connect to a specific xinu server
connect_specific() {
    local input=$1
    local server=$input

    # Convert to galileo + number
    if [[ $input =~ ^[0-9]+$ ]]; then
        server="${SERVER_PREFIX}${input}"
        echo -e "${PREFIX} ${BOLD}- ${GREEN}Converting number '${input}' as '${server}'${NC}"
    fi

    if ! isValid "$server"; then
        echo -e "${PREFIX} ${BOLD}- ${GREEN}Error: Invalid server '${input}'${NC}" >&2 
        local range=$(getServerRange)
        if [[ $input =~ ^[0-9]+$ ]]; then
            echo -e "${RED}Valid numeric range: ${range}${NC}" >&2
        else
            echo -e "${RED}Valid server format: ${SERVER_PREFIX}${range}{NC}" >&2
        fi
        exit 1
    fi

    if ! isAvailable "$server"; then
        echo -e "${PREFIX} ${BOLD}- ${RED}Error: $server is not available${NC}" >&2
        exit 1
    fi
    
    if grep -qxF "$server" "$BLACKLIST_FILE" 2>/dev/null; then
        echo -e "${PREFIX} ${BOLD}- ${YELLOW}WARNING: $server is in blacklist but connecting anyway${NC}"
    fi
    
    echo -e "${PREFIX} ${BOLD}- ${GREEN}Connecting to $server...${NC}"
    cs-console "$server"
}

# Connect to a random xinu server
connect_random() {
    available_servers=$(cs-status -c $MODE | awk '/user= [ ]+time= / {print $1}')

    blacklisted_servers=()
    [[ -f "$BLACKLIST_FILE" ]] && blacklisted_servers=($(cat "$BLACKLIST_FILE"))

    filtered_servers=()
    for server in $available_servers; do
        if ! printf '%s\n' "${blacklisted_servers[@]}" | grep -qx "$server"; then
            filtered_servers+=("$server")
        fi
    done

    if [[ ${#filtered_servers[@]} -eq 0 ]]; then
        echo -e "${PREFIX} ${BOLD}- ${RED}No available servers${NC}"
        exit 1
    fi

    selected_server=${filtered_servers[$RANDOM % ${#filtered_servers[@]}]}
    echo -e "${PREFIX} ${BOLD}- ${GREEN}Connecting to $selected_server...${NC}"
    cs-console "$selected_server"
}

# Arguments
case "$1" in
    -l|--list)
        display_all
        ;;
    -b|--blacklist)
        display_blacklist
        ;;
    -a|--add)
        shift
        add_to_blacklist "$@"
        ;;
    -r|--remove)
        shift
        remove_from_blacklist "$@"
        ;;
    -c|--clear)
        shift
        clear_blacklist
        ;;
    -h|--help)
        help_disp
        ;;
    -v|--version)
        echo -e "${PREFIX} ${YELLOW}v0.1 - ${SCRIPT_NAME}${NC}"
        ;;
    -cg|--config)
        config_disp
        ;;
    -s|--set)
        shift
        if [[ "$1" == *"="* ]]; then
            IFS='=' read -r key value <<< "$1"
            set_config "$key" "$value"
        else
            echo -e "${PREFIX} ${BOLD}- ${RED}Invalid format: use KEY=VALUE${NC}" >&2
            exit 1
        fi
        ;;
    -rc|--reset-config)
        shift
        reset_config
        ;;
    "")
        if [[ "${REFRESH_BROKEN^^}" == "TRUE" ]]; then
            pullBrokenServers
        fi
        connect_random
        ;;
    *)
        if [[ "$1" == -* ]]; then
            echo -e "${PREFIX} ${BOLD}- ${RED}Invalid option: $1 ${NC}" >&2
            help_disp
            exit 1
        else
            if [[ "${REFRESH_BROKEN^^}" == "TRUE" ]]; then
                pullBrokenServers
            fi
            connect_specific "$1"
        fi
        ;;
esac
